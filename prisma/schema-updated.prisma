// Updated Prisma Schema - Synced with Supabase Database
// This reflects all manual SQL changes made to the database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// Admin Model - Updated with new fields
// ============================================
model admins {
  admin_id              Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  email                 String                  @unique @db.VarChar(150)
  password_hash         String                  @db.VarChar(255)
  role                  role_type               @default(ADMIN)
  custom_role           String?                 @db.VarChar(150)
  permissions           Json?                   @db.JsonB
  two_factor            Boolean                 @default(false)
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  last_login            DateTime?               @db.Timestamp(6)
  is_super_admin        Boolean                 @default(false)
  supabase_user_id      String?                 @unique @db.Uuid
  
  // Relations
  admin_activity_log    admin_activity_log[]
  contests              contests[]              @relation("contest_creator")
  draws                 draws[]
  messages              messages[]
}

// ============================================
// Admin Activity Log Model
// ============================================
model admin_activity_log {
  log_id       Int             @id @default(autoincrement())
  admin_id     Int
  action       String
  target_table String          @db.VarChar(100)
  target_id    Int?
  session_id   String?         @db.VarChar(255)
  status       activity_status @default(SUCCESS)
  timestamp    DateTime        @default(now()) @db.Timestamp(6)
  
  // Relations
  admin        admins          @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade)
}

// ============================================
// Contest Model
// ============================================
model contests {
  contest_id    Int             @id @default(autoincrement())
  name          String          @db.VarChar(150)
  theme         String?         @db.VarChar(150)
  description   String?
  entry_form_id Int?
  start_date    DateTime        @db.Timestamp(6)
  end_date      DateTime        @db.Timestamp(6)
  entry_rules   Json?           @db.JsonB
  status        contest_status  @default(UPCOMING)
  created_by    Int?
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  qr_code_url   String?         @db.VarChar(500)
  
  // Relations
  creator       admins?         @relation("contest_creator", fields: [created_by], references: [admin_id])
  entry_form    forms?          @relation(fields: [entry_form_id], references: [form_id])
  draws         draws[]
  messages      messages[]
  participants  participants[]
  prizes        prizes[]
}

// ============================================
// Prize Model
// ============================================
model prizes {
  prize_id    Int       @id @default(autoincrement())
  contest_id  Int
  prize_name  String    @db.VarChar(150)
  value       Decimal?  @db.Decimal(12, 2)
  quantity    Int       @default(1)
  description String?
  
  // Relations
  contest     contests  @relation(fields: [contest_id], references: [contest_id], onDelete: Cascade)
  winners     winners[]
}

// ============================================
// Participant Model
// ============================================
model participants {
  participant_id   Int            @id @default(autoincrement())
  contest_id       Int
  name             String         @db.VarChar(150)
  form_response_id Int?
  contact          String         @db.VarChar(150)
  entry_timestamp  DateTime       @default(now()) @db.Timestamp(6)
  validated        Boolean        @default(true)
  unique_token     String?        @unique @db.VarChar(255)
  
  // Relations
  contest          contests       @relation(fields: [contest_id], references: [contest_id], onDelete: Cascade)
  form_response    form_responses? @relation(fields: [form_response_id], references: [response_id])
  winners          winners[]
  messages         messages[]
}

// ============================================
// Draw Model
// ============================================
model draws {
  draw_id       Int       @id @default(autoincrement())
  contest_id    Int
  draw_mode     draw_mode
  executed_by   Int?
  executed_at   DateTime  @default(now()) @db.Timestamp(6)
  total_winners Int
  
  // Relations
  contest       contests  @relation(fields: [contest_id], references: [contest_id], onDelete: Cascade)
  executor      admins?   @relation(fields: [executed_by], references: [admin_id])
  winners       winners[]
}

// ============================================
// Winner Model
// ============================================
model winners {
  winner_id      Int          @id @default(autoincrement())
  draw_id        Int
  participant_id Int
  prize_id       Int?
  prize_status   prize_status @default(PENDING)
  notified       Boolean      @default(false)
  notified_at    DateTime?    @db.Timestamp(6)
  
  // Relations
  draw           draws        @relation(fields: [draw_id], references: [draw_id], onDelete: Cascade)
  participant    participants @relation(fields: [participant_id], references: [participant_id], onDelete: Cascade)
  prize          prizes?      @relation(fields: [prize_id], references: [prize_id])
}

// ============================================
// Message Model
// ============================================
model messages {
  message_id     Int          @id @default(autoincrement())
  contest_id     Int
  participant_id Int?
  type           message_type
  recipient      String       @db.VarChar(150)
  content        String
  sent_at        DateTime     @default(now()) @db.Timestamp(6)
  sent_by        Int?
  is_auto        Boolean      @default(false)
  
  // Relations
  contest        contests     @relation(fields: [contest_id], references: [contest_id], onDelete: Cascade)
  participant    participants? @relation(fields: [participant_id], references: [participant_id], onDelete: Cascade)
  sender         admins?      @relation(fields: [sent_by], references: [admin_id])
}

// ============================================
// Form Model
// ============================================
model forms {
  form_id     Int              @id @default(autoincrement())
  form_name   String           @db.VarChar(150)
  form_schema Json?            @db.JsonB
  created_at  DateTime         @default(now()) @db.Timestamp(6)
  
  // Relations
  contests    contests[]
  responses   form_responses[]
}

// ============================================
// Form Response Model
// ============================================
model form_responses {
  response_id   Int            @id @default(autoincrement())
  form_id       Int?
  response_data Json?          @db.JsonB
  submitted_at  DateTime       @default(now()) @db.Timestamp(6)
  
  // Relations
  form          forms?         @relation(fields: [form_id], references: [form_id])
  participants  participants[]
}

// ============================================
// Enums
// ============================================

enum activity_status {
  SUCCESS
  FAILURE
  PENDING
}

enum contest_status {
  DRAFT
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum draw_mode {
  RANDOM
  MANUAL
  WEIGHTED
}

enum message_type {
  EMAIL
  SMS
  WHATSAPP
  PUSH
}

enum prize_status {
  PENDING
  CLAIMED
  SHIPPED
}

enum role_type {
  ADMIN
  SUPERADMIN
  MODERATOR
}